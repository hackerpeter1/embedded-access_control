C51 COMPILER V9.01   MAIN                                                                  02/08/2019 13:53:58 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Program Files\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #define MAIN_Fosc               22118400L       //定义主时钟
   2          
   3          #include        "STC15Fxxxx.H"
   4          
   5          
   6          
   7          /***********************************************************/
   8          
   9          #define DIS_DOT         0x20
  10          #define DIS_BLACK       0x10
  11          #define DIS_            0x11
  12          
  13          
  14          /****************************** 用户定义宏 ***********************************/
  15          #define Timer0_Reload   (65536UL -(MAIN_Fosc / 1000))           //Timer 0 中断频率, 1000次/秒
  16          
  17          /*****************************************************************************/
  18          
  19          
  20          
  21          
  22          /*************  本地常量声明    **************/
  23          u8 code t_display[]={                                           //标准字库
  24          //       0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
  25                  0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71,
  26          //black  -     H    J    K        L        N    o   P    U     t    G    Q    r   M    y
  27                  0x00,0x40,0x76,0x1E,0x70,0x38,0x37,0x5C,0x73,0x3E,0x78,0x3d,0x67,0x50,0x37,0x6e,
  28                  0xBF,0x86,0xDB,0xCF,0xE6,0xED,0xFD,0x87,0xFF,0xEF,0x46};        //0. 1. 2. 3. 4. 5. 6. 7. 8. 9. -1
  29          
  30          u8 code T_COM[]={0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};              //位码
  31          u8 day_num[]={31,28,31,30,31,30,31,31,30,31,30,31};
  32          
  33          #define     Baudrate1           115200L
  34          #define     UART1_BUF_LENGTH    32
  35          
  36          /*************  IO口定义        **************/
  37          sbit    P_HC595_SER   = P4^0;   //pin 14        SER             data input
  38          sbit    P_HC595_RCLK  = P5^4;   //pin 12        RCLk    store (latch) clock
  39          sbit    P_HC595_SRCLK = P4^3;   //pin 11        SRCLK   Shift data clock
  40          
  41          
  42          /*************  本地变量声明    **************/
  43          
  44          u8      LED8[8];                //显示缓冲
  45          
  46          u8      display_index;  //显示位索引
  47          bit     B_1ms;                  //1ms标志
  48          
  49          u8  IO_KeyState, IO_KeyState1, IO_KeyHoldCnt;   //行列键盘变量
  50          u8      KeyHoldCnt;     //键按下计时
  51          u8      KeyCode;        //给用户使用的键码, 1~16有效
  52          u8      cnt50ms;
  53          u8      try,able;
  54          
  55          u8      month,day,hour,minute,second;   //RTC变量
C51 COMPILER V9.01   MAIN                                                                  02/08/2019 13:53:58 PAGE 2   

  56          u8  curr_input;
  57          u8  key[] = {0, 0, 0, 0, 0, 0, 0, 0};
  58          u8      standard[] = {1, 2, 3, 4};
  59          u8  curr_show;  // 0显示时间，1显示日期，2显示温度
  60          u8  open;
  61          u16 year;
  62          u16     msecond, opentime, trytime;
  63          
  64          u8  TX1_Cnt;    //发送计数
  65          u8  RX1_Cnt;    //接收计数
  66          bit B_TX1_Busy; //发送忙标志
  67          u8  idata RX1_Buffer[UART1_BUF_LENGTH]; //接收缓冲
  68          u8* Send_String;
  69          
  70          
  71          /*************  本地函数声明    **************/
  72          void    CalculateAdcKey(u16 adc);
  73          void    Display(u8 curr_show);
  74          void    IO_KeyScan(void);       //50ms call
  75          void    WriteNbyte(u8 addr, u8 *p, u8 number);
  76          void    ReadNbyte( u8 addr, u8 *p, u8 number);
  77          void    DisplayTime(void);
  78          void    DisplayDate(void);
  79          void    DisplayTemp(void);
  80          void    DisplayKey(void);
  81          void    DisplayNewKey(void);
  82          void    reKey(void);
  83          void    changeDate(void);
  84          void    changing(u8 KeyCode, u8 curr_show);
  85          void    ReadRTC(void);
  86          void    WriteRTC(void);
  87          void    alert(u8 _code);
  88          void    delay_ms(u8 ms);
  89          u16             get_temperature(u16 adc);
  90          u16             Get_ADC10bitResult(u8 channel); //channel = 0~7
  91          void    UART1_config(u8 brt);   // 选择波特率, 2: 使用Timer2做波特率, 其它值: 使用Timer1做波特率.
  92          void    PrintString1(u8 *puts);
  93          u8              *my_itoa(u16 n);
  94                                                                                             
  95          /****************  外部函数声明和外部变量声明 *****************/
  96          
  97          
  98          /**********************************************/
  99          void main(void)
 100          {
 101   1              u8      i;
 102   1      
 103   1              P0M1 = 0;       P0M0 = 0;       //设置为准双向口
 104   1              P1M1 = 0;       P1M0 = 0;       //设置为准双向口
 105   1              P2M1 = 0;       P2M0 = 0;       //设置为准双向口
 106   1              P3M1 = 0;       P3M0 = 0;       //设置为准双向口
 107   1              P4M1 = 0;       P4M0 = 0;       //设置为准双向口
 108   1              P5M1 = 0;       P5M0 = 0;       //设置为准双向口
 109   1              P6M1 = 0;       P6M0 = 0;       //设置为准双向口
 110   1              P7M1 = 0;       P7M0 = 0;       //设置为准双向口
 111   1              
 112   1              P1ASF = 0x0C;           //P1.2 P1.3做ADC
 113   1              ADC_CONTR = 0xE0;       //90T, ADC power on
 114   1              
 115   1              display_index = 0;
 116   1              curr_show = 0;
 117   1              curr_input = 0;
C51 COMPILER V9.01   MAIN                                                                  02/08/2019 13:53:58 PAGE 3   

 118   1              opentime = 0;
 119   1              trytime = 0;
 120   1              AUXR = 0x80;    //Timer0 set as 1T, 16 bits timer auto-reload, 
 121   1              TH0 = (u8)(Timer0_Reload / 256);
 122   1              TL0 = (u8)(Timer0_Reload % 256);
 123   1              ET0 = 1;        //Timer0 interrupt enable
 124   1              TR0 = 1;        //Tiner0 run
 125   1      
 126   1              UART1_config(1);    // 选择波特率, 2: 使用Timer2做波特率, 其它值: 使用Timer1做波特率.
 127   1              EA = 1;         //打开总中断
 128   1              
 129   1              for(i=0; i<8; i++)      LED8[i] = 0x10; //上电消隐
 130   1      
 131   1              
 132   1              ReadRTC();
 133   1              F0 = 0;
 134   1              month = 1;
 135   1              year = 2019;
 136   1              day = 1;
 137   1              if(second >= 60)        F0 = 1; //错误
 138   1              if(minute >= 60)        F0 = 1; //错误
 139   1              if(hour   >= 24)        F0 = 1; //错误
 140   1              if(F0)  //有错误, 默认12:00:00
 141   1              {
 142   2                      second = 0;
 143   2                      minute = 0;
 144   2                      hour  = 12;
 145   2                      WriteRTC();
 146   2              }
 147   1      
 148   1              Display(curr_show);
 149   1              open = 0;
 150   1              try = 0;
 151   1              able = 1;
 152   1      
 153   1              KeyHoldCnt = 0; //键按下计时
 154   1              KeyCode = 0;    //给用户使用的键码, 1~16有效
 155   1      
 156   1              IO_KeyState = 0;
 157   1              IO_KeyState1 = 0;
 158   1              IO_KeyHoldCnt = 0;
 159   1              cnt50ms = 0;
 160   1              
 161   1              while(1)
 162   1              {
 163   2                      if(B_1ms)       //1ms到
 164   2                      {
 165   3                              if(open == 1) opentime++;
 166   3                              else opentime = 0;
 167   3                              if(opentime >= 2000) reKey();
 168   3                              if(opentime >= 9000) alert(2);
 169   3                              B_1ms = 0;
 170   3                              if(try > 0 && try < 5) trytime++;
 171   3                              if(trytime >= 20000){
 172   4                                        try = 0;
 173   4                                        trytime = 0;
 174   4                              } 
 175   3                              if(++msecond >= 1000)   //1秒到
 176   3                              {
 177   4                                      msecond = 0;
 178   4                                      changeDate();
 179   4                                      ReadRTC();
C51 COMPILER V9.01   MAIN                                                                  02/08/2019 13:53:58 PAGE 4   

 180   4                                      Display(curr_show);
 181   4                              }
 182   3      
 183   3                              if(++cnt50ms >= 50)             //50ms扫描一次行列键盘
 184   3                              {
 185   4                                      cnt50ms = 0;
 186   4                                      IO_KeyScan();
 187   4                              }
 188   3                              
 189   3                              if(KeyCode != 0)                //有键按下
 190   3                              {
 191   4                                      if(KeyCode == 27)       curr_show = 0; // 时钟模式
 192   4                                      if(KeyCode == 28)       curr_show = 1; // 日期模式
 193   4                                      if(KeyCode == 29)       curr_show = 2; // 温度模式
 194   4                                      if(KeyCode == 30 && curr_show != 3 && able == 1){   // 输入密码模式
 195   5                                              curr_show = 3; 
 196   5                                              curr_input = 0;
 197   5                                      }       
 198   4                                      if((KeyCode == 31 && curr_show != 4 && curr_show != 3 && able == 1) || (KeyCode == 31 && curr_show == 
             -3 && curr_input == 0 && able == 1)){
 199   5                                              curr_show = 4; 
 200   5                                              curr_input = 0;
 201   5                                      }
 202   4                       
 203   4                                      if(KeyCode >= 17 && KeyCode <= 26 && curr_show == 3 && curr_input < 4 && able == 1)     //输入密码
 204   4                                      {
 205   5                                              LED8[curr_input+4] = KeyCode - 17;
 206   5                                              key[curr_input] = KeyCode - 17;
 207   5                                              curr_input++;
 208   5                                      }
 209   4                                      if(KeyCode >= 17 && KeyCode <= 26 && curr_show == 4 && curr_input < 8 && able == 1)     //修改密码
 210   4                                      {
 211   5                                              LED8[curr_input] = KeyCode - 17;
 212   5                                              key[curr_input] = KeyCode - 17;
 213   5                                              curr_input++;
 214   5                                      }
 215   4                                      else if(KeyCode >= 17 && KeyCode <= 20 && curr_show != 3){      // 时间和日期的调整
 216   5                                              changing(KeyCode,curr_show);
 217   5                                      }
 218   4                                      if(KeyCode == 30 && curr_show == 3 && curr_input == 4 && able == 1){   // 输入密码模式，检测
 219   5                                              if(standard[0] == key[0] && standard[1] == key[1]  && standard[2] == key[2] && standard[3] == key[
             -3]){
 220   6                                                      P17 = 0;
 221   6                                                      P16 = 0;
 222   6                                                      P47 = 0;
 223   6                                                      P46 = 0;
 224   6                                                      Send_String = my_itoa(hour);
 225   6                                                  PrintString1(Send_String);
 226   6                                                      Send_String = my_itoa(minute);
 227   6                                                      PrintString1(Send_String);
 228   6                                                      Send_String = my_itoa(second);
 229   6                                                      PrintString1(Send_String);
 230   6                                                      open = 1;
 231   6                                                      try = 0;
 232   6                                              }
 233   5                                              else{
 234   6                                                      alert(1);
 235   6                                                      if(++try >= 5){
 236   7                                                              alert(4);
 237   7                                                          able = 0;
 238   7                                                      }
 239   6                                                      curr_input = 0;
C51 COMPILER V9.01   MAIN                                                                  02/08/2019 13:53:58 PAGE 5   

 240   6                                              }
 241   5                                      }
 242   4                                      if(KeyCode == 31 && curr_show == 4 && curr_input == 8 && able == 1){   // 修改密码模式，检测
 243   5                                              if(standard[0] == key[0] && standard[1] == key[1]  && standard[2] == key[2] && standard[3] == key[
             -3]){
 244   6                                                      try = 0;
 245   6                                                      reKey();
 246   6                                                      if(key[4] == 0 && key[5] == 0 && key[6] == 0 && key[7] == 0){
 247   7                                                              alert(3);
 248   7                                                      }
 249   6                                                      else{
 250   7                                                              P17 = 0; P16 = 0;P47 = 0;P46 = 0;
 251   7                                                              standard[0] = key[4]; 
 252   7                                                              standard[1] = key[5]; 
 253   7                                                              standard[2] = key[6]; 
 254   7                                                              standard[3] = key[7];
 255   7                                                              delay_ms(1500);                                                  
 256   7                                                              curr_show = 3;   
 257   7                                                      }       
 258   6                                              }
 259   5                                              
 260   5                                              else{
 261   6                                                      alert(1);
 262   6                                                      if(++try >= 5){
 263   7                                                              alert(4);
 264   7                                                              able = 0;
 265   7                                                      }
 266   6                                                      curr_input = 0;
 267   6                                              }
 268   5                                              
 269   5                                      }                                       
 270   4                                      if(KeyCode == 32){        // 撤销+关门+门锁复位
 271   5                                              
 272   5                                              if(curr_show == 3 && curr_input > 0 && able == 1){
 273   6                                                      key[curr_input-1] = 0;
 274   6                                                      LED8[curr_input+3] = DIS_;
 275   6                                                      curr_input--;
 276   6                                              }
 277   5                                              else if(curr_show == 4 && curr_input > 0 && able == 1) {
 278   6                                                      key[curr_input-1] = 0;
 279   6                                                      LED8[curr_input-1] = DIS_;
 280   6                                                      curr_input--;
 281   6                                              }
 282   5                                              else{
 283   6                                                      open = 0;
 284   6                                                      reKey();
 285   6                                                      curr_show = 0;
 286   6                                              }
 287   5              
 288   5                                      }  
 289   4      
 290   4                                      Display(curr_show);
 291   4                                      KeyCode = 0;
 292   4                
 293   4                              }
 294   3      
 295   3                      }
 296   2              }
 297   1      } 
 298          /******************************/
 299          void    changeDate(void){
 300   1              if(hour == 0 && minute == 0 && second == 0)
C51 COMPILER V9.01   MAIN                                                                  02/08/2019 13:53:58 PAGE 6   

 301   1                      changing(19,1);
 302   1      }
 303          void    changing(u8 KeyCode, u8 curr_show){
 304   1              if(curr_show == 0){
 305   2                      if(KeyCode == 17){
 306   3                              if(hour == 23){
 307   4                                      hour = 0;
 308   4                                      changing(19, 1);
 309   4                              }
 310   3                              else{
 311   4                                 hour++;
 312   4                              }
 313   3                      }
 314   2                      else if(KeyCode == 18){
 315   3                              if(hour == 0){
 316   4                                      hour = 23;
 317   4                                      changing(20, 1);
 318   4                              }
 319   3                              else{
 320   4                                 hour--;
 321   4                              }
 322   3                      }
 323   2                      else if (KeyCode == 19){
 324   3                              if(minute == 59){
 325   4                                      minute = 0;
 326   4                                      changing(17, 0);
 327   4                              }
 328   3                              else minute++;
 329   3                              second = 0;
 330   3                      }
 331   2                      else if (KeyCode == 20){
 332   3                              if(minute == 0){
 333   4                                      minute = 59;
 334   4                                      changing(18, 0);
 335   4                              }
 336   3                              else minute--;
 337   3                              second = 0;
 338   3                      }
 339   2                      WriteRTC();
 340   2              }
 341   1              else if(curr_show == 1){
 342   2                      if(KeyCode == 17){
 343   3                              if(month == 12){
 344   4                                      year++;
 345   4                                      month = 1;
 346   4                              }
 347   3                              else month++;
 348   3                      }
 349   2                      else if(KeyCode == 18){
 350   3                              if(month == 1){
 351   4                                      year--;
 352   4                                      month = 12;
 353   4                              }
 354   3                              else{
 355   4                                      month--;
 356   4                              }
 357   3                      }
 358   2                      else if(KeyCode == 19){
 359   3                              if(day == day_num[month-1]){
 360   4                                      day = 1;
 361   4                                      changing(17, 1);
 362   4                              }
C51 COMPILER V9.01   MAIN                                                                  02/08/2019 13:53:58 PAGE 7   

 363   3                              else{
 364   4                                      ++day;
 365   4                              }
 366   3                      }
 367   2                      else if(KeyCode == 20){
 368   3                              if(day == 1){
 369   4                                      changing(18, 1);
 370   4                                      day = day_num[month-1];
 371   4                              }
 372   3                              else{
 373   4                                      day--;
 374   4                              }
 375   3                      }
 376   2              }
 377   1      }
 378          
 379          void alert(u8 _code){
 380   1              if(_code == 1){
 381   2                      P17 = 0;
 382   2                      P16 = 1;
 383   2                      P47 = 1;
 384   2                      P46 = 1;
 385   2              }
 386   1              if(_code == 2){
 387   2                      P17 = 1;
 388   2                      P16 = 0;
 389   2                      P47 = 1;
 390   2                      P46 = 1;
 391   2              }
 392   1              if(_code == 3){
 393   2                      P17 = 1;
 394   2                      P16 = 1;
 395   2                      P47 = 0;
 396   2                      P46 = 1;
 397   2              }
 398   1              if(_code == 4){
 399   2                      while(1)
 400   2                      {
 401   3                              P17 = 0;
 402   3                              delay_ms(250);
 403   3                              delay_ms(250);
 404   3                              P17 = 1;
 405   3                              P16 = 0;
 406   3                              delay_ms(250);
 407   3                              delay_ms(250);
 408   3                              P16 = 1;
 409   3                              P47 = 0;
 410   3                              delay_ms(250);
 411   3                              delay_ms(250);
 412   3                              P47 = 1;
 413   3                              P46 = 0;
 414   3                              delay_ms(250);
 415   3                              delay_ms(250);
 416   3                              P46 = 1;
 417   3                      }
 418   2              }
 419   1      }
 420          
 421          void reKey(){
 422   1              P17 = 1;        
 423   1              P16 = 1;
 424   1              P47 = 1;
C51 COMPILER V9.01   MAIN                                                                  02/08/2019 13:53:58 PAGE 8   

 425   1              P46 = 1; 
 426   1              key[0] = 0;
 427   1              key[1] = 0;
 428   1              key[2] = 0;
 429   1              key[3] = 0;
 430   1              key[4] = 0;
 431   1              key[5] = 0;
 432   1              key[6] = 0;
 433   1              key[7] = 0;
 434   1              curr_input = 0;
 435   1      }
 436          
 437          
 438          /**************** 向HC595发送一个字节函数 ******************/
 439          void Send_595(u8 dat)
 440          {               
 441   1              u8      i;
 442   1              for(i=0; i<8; i++)
 443   1              {
 444   2                      dat <<= 1;
 445   2                      P_HC595_SER   = CY;
 446   2                      P_HC595_SRCLK = 1;
 447   2                      P_HC595_SRCLK = 0;
 448   2              }
 449   1      }
 450          
 451          /********************** 显示扫描函数 ************************/
 452          void DisplayScan(void)
 453          {       
 454   1              Send_595(~T_COM[display_index]);                                //输出位码
 455   1              Send_595(t_display[LED8[display_index]]);       //输出段码
 456   1      
 457   1              P_HC595_RCLK = 1;
 458   1              P_HC595_RCLK = 0;                                                       //锁存输出数据
 459   1              if(++display_index >= 8)        display_index = 0;      //8位结束回0
 460   1      }
 461          
 462          
 463          /********************** Timer0 1ms中断函数 ************************/
 464          void timer0 (void) interrupt TIMER0_VECTOR
 465          {
 466   1              DisplayScan();  //1ms扫描显示一位
 467   1              B_1ms = 1;              //1ms标志
 468   1      }
 469          
 470          void  delay_ms(u8 ms)
 471          {
 472   1           u16 i;
 473   1               do{
 474   2                    i = MAIN_Fosc / 13000;
 475   2                        while(--i)    ;   //14T per loop
 476   2           }while(--ms);
 477   1      }
 478          
 479          /*********************** 许延泽新增了四个通信函数 ****************/
 480          //========================================================================
 481          // 函数: SetTimer2Baudraye(u16 dat)
 482          // 描述: 设置Timer2做波特率发生器。
 483          // 参数: dat: Timer2的重装值.
 484          // 返回: none.
 485          // 版本: VER1.0
 486          // 日期: 2014-11-28
C51 COMPILER V9.01   MAIN                                                                  02/08/2019 13:53:58 PAGE 9   

 487          // 备注: 
 488          //========================================================================
 489          void    SetTimer2Baudraye(u16 dat)  // 选择波特率, 2: 使用Timer2做波特率, 其它值: 使用Timer1做波特率.
 490          {
 491   1          AUXR &= ~(1<<4);    //Timer stop
 492   1          AUXR &= ~(1<<3);    //Timer2 set As Timer
 493   1          AUXR |=  (1<<2);    //Timer2 set as 1T mode
 494   1          TH2 = dat / 256;
 495   1          TL2 = dat % 256;
 496   1          IE2  &= ~(1<<2);    //禁止中断
 497   1          AUXR |=  (1<<4);    //Timer run enable
 498   1      }
 499          
 500          //========================================================================
 501          // 函数: void   UART1_config(u8 brt)
 502          // 描述: UART1初始化函数。
 503          // 参数: brt: 选择波特率, 2: 使用Timer2做波特率, 其它值: 使用Timer1做波特率.
 504          // 返回: none.
 505          // 版本: VER1.0
 506          // 日期: 2014-11-28
 507          // 备注: 
 508          //========================================================================
 509          void    UART1_config(u8 brt)    // 选择波特率, 2: 使用Timer2做波特率, 其它值: 使用Timer1做波特率.
 510          {
 511   1          /*********** 波特率使用定时器2 *****************/
 512   1          if(brt == 2)
 513   1          {
 514   2              AUXR |= 0x01;       //S1 BRT Use Timer2;
 515   2              SetTimer2Baudraye(65536UL - (MAIN_Fosc / 4) / Baudrate1);
 516   2          }
 517   1      
 518   1          /*********** 波特率使用定时器1 *****************/
 519   1          else
 520   1          {
 521   2              TR1 = 0;
 522   2              AUXR &= ~0x01;      //S1 BRT Use Timer1;
 523   2              AUXR |=  (1<<6);    //Timer1 set as 1T mode
 524   2              TMOD &= ~(1<<6);    //Timer1 set As Timer
 525   2              TMOD &= ~0x30;      //Timer1_16bitAutoReload;
 526   2              TH1 = (u8)((65536UL - (MAIN_Fosc / 4) / Baudrate1) / 256);
 527   2              TL1 = (u8)((65536UL - (MAIN_Fosc / 4) / Baudrate1) % 256);
 528   2              ET1 = 0;    //禁止中断
 529   2              INT_CLKO &= ~0x02;  //不输出时钟
 530   2              TR1  = 1;
 531   2          }
 532   1          /*************************************************/
 533   1      
 534   1          SCON = (SCON & 0x3f) | 0x40;    //UART1模式, 0x00: 同步移位输出, 0x40: 8位数据,可变波特率, 0x80: 9位数
             -据,固定波特率, 0xc0: 9位数据,可变波特率
 535   1      //  PS  = 1;    //高优先级中断
 536   1          ES  = 1;    //允许中断
 537   1          REN = 1;    //允许接收
 538   1          P_SW1 &= 0x3f;
 539   1          P_SW1 |= 0x80;      //UART1 switch to, 0x00: P3.0 P3.1, 0x40: P3.6 P3.7, 0x80: P1.6 P1.7 (必须使用内部
             -时钟)
 540   1      //  PCON2 |=  (1<<4);   //内部短路RXD与TXD, 做中继, ENABLE,DISABLE
 541   1      
 542   1          B_TX1_Busy = 0;
 543   1          TX1_Cnt = 0;
 544   1          RX1_Cnt = 0;
 545   1      }
 546          
C51 COMPILER V9.01   MAIN                                                                  02/08/2019 13:53:58 PAGE 10  

 547          
 548          void PrintString1(u8 *puts) //使用uart1发送一个字符串
 549          {
 550   1          for (; *puts != 0;  puts++)     //遇到停止符0结束
 551   1          {
 552   2              SBUF = *puts;
 553   2              B_TX1_Busy = 1;
 554   2              while(B_TX1_Busy);
 555   2          }
 556   1      }
 557          
 558          //========================================================================
 559          // 函数: void UART1_int (void) interrupt UART1_VECTOR
 560          // 描述: UART1中断函数。
 561          // 参数: nine.
 562          // 返回: none.
 563          // 版本: VER1.0
 564          // 日期: 2014-11-28
 565          // 备注: 
 566          //========================================================================
 567          void UART1_int (void) interrupt 4
 568          {
 569   1          if(RI)
 570   1          {
 571   2              RI = 0;
 572   2              RX1_Buffer[RX1_Cnt] = SBUF;
 573   2              if(++RX1_Cnt >= UART1_BUF_LENGTH)   RX1_Cnt = 0;    //防溢出
 574   2          }
 575   1      
 576   1          if(TI)
 577   1          {
 578   2              TI = 0;
 579   2              B_TX1_Busy = 0;
 580   2          }
 581   1      }
 582          
 583          //反转字符串
 584          u8 *reverse(u8 *s)
 585          {
 586   1          u8 temp;
 587   1          u8 *p = s;    //p指向s的头部
 588   1          u8 *q = s;    //q指向s的尾部
 589   1          while(*q)
 590   1              ++q;
 591   1          q--;
 592   1          
 593   1          //交换移动指针，直到p和q交叉
 594   1          while(q > p)
 595   1          {
 596   2              temp = *p;
 597   2              *p++ = *q;
 598   2              *q-- = temp;
 599   2          }
 600   1          return s;
 601   1      }
 602          
 603          /*
 604           * 功能：整数转换为字符串
 605           * char s[] 的作用是存储整数的每一位
 606           */
 607          u8 *my_itoa(u16 n)
 608          {
C51 COMPILER V9.01   MAIN                                                                  02/08/2019 13:53:58 PAGE 11  

 609   1          int i = 0,isNegative = 0;
 610   1          static u8 s[10];      //必须为static变量，或者是全局变量
 611   1          if((isNegative = n) < 0) //如果是负数，先转为正数
 612   1          {
 613   2              n = -n;
 614   2          }
 615   1          do      //从各位开始变为字符，直到最高位，最后应该反转
 616   1          {
 617   2              s[i++] = n%10 + '0';
 618   2              n = n/10;
 619   2          }while(n > 0);
 620   1          
 621   1          if(isNegative < 0)   //如果是负数，补上负号
 622   1          {
 623   2              s[i++] = '-';
 624   2          }
 625   1          s[i] = '\0';    //最后加上字符串结束符
 626   1          return reverse(s);
 627   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1789    ----
   CONSTANT SIZE    =     51    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     72      15
   IDATA SIZE       =     32    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
